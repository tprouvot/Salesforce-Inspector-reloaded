import{Extension as e}from"./Extension.js";export class TimeSyncExtension extends e{#a;#b=[];#c=[];#d=0;#e=0;constructor(e){super(),this.#a=e&&e.maxSamples||10}registered(e,t){super.registered(e,t),this.cometd._debug("TimeSyncExtension: executing registration callback")}unregistered(){this.cometd._debug("TimeSyncExtension: executing unregistration callback"),super.unregistered(),this.#b=[],this.#c=[],this.#d=0,this.#e=0}incoming(e){let t=e.channel;if(t&&0===t.indexOf("/meta/")&&e.ext&&e.ext.timesync){let s=e.ext.timesync;this.cometd._debug("TimeSyncExtension: server sent timesync",s);let i=new Date().getTime(),n=(i-s.tc-s.p)/2,r=s.ts-s.tc-n;this.#b.push(n),this.#c.push(r),this.#c.length>this.#a&&(this.#c.shift(),this.#b.shift());let m=this.#c.length,g=0,o=0;for(let h=0;h<m;++h)g+=this.#b[h],o+=this.#c[h];this.#d=parseInt((g/m).toFixed()),this.#e=parseInt((o/m).toFixed()),this.cometd._debug("TimeSyncExtension: network lag",this.#d,"ms, time offset with server",this.#e,"ms")}return e}outgoing(e){let t=e.channel;return t&&0===t.indexOf("/meta/")&&(e.ext||(e.ext={}),e.ext.timesync={tc:new Date().getTime(),l:this.getNetworkLag(),o:this.getTimeOffset()},this.cometd._debug("TimeSyncExtension: client sending timesync",e.ext.timesync)),e}getTimeOffset(){return this.#e}getNetworkLag(){return this.#d}getServerTime(){return new Date().getTime()+this.getTimeOffset()}getServerDate(){return new Date(this.getServerTime())}setTimeout(e,t){let s=t instanceof Date?t.getTime():0+t,i=s-this.getTimeOffset(),n=i-new Date().getTime();return n<0&&(n=0),this.cometd.setTimeout(e,n)}}
